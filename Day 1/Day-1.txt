StepIn : 1. C++ Awareness
	 2. Classes and Objects
	 3. Inheritance
	 4. Virtual Functions
	 5. Operator Overloading

Genesis Foundation:  
	1. Insights on above topics (Reinforce) Cpp Insights - Check list
	2. Templates
	3. STL containers and Iterators
	4. Emphasis on code quality (Cpp check , Valgrind, code style)
	5. Unit Testing 
	6. Hands on: Assignments (Set 1-4, Coding Tasks(6))
	   
Genesis Specialization/Advanced: (19-10-2020)
	1. C++ 11/14 additions
	2. Concurrency & IPC
	3. Basics design aspects	
	4. More focus on code quality
	5. Reimplement coding tasks using C++ 11 & 14 
	6. Apply C++ 11 & 14, threads and IPC in Mini Projects
	 
	
BOOKS:
	1. Effective C++ by Scott Meyers
	2. Effective Modern C++ by Scott Meyers
	3. Clean code by Robert Martin (or) Code complete by Steve McConnell
	
Previous Assessmemt was in the TDD form
TDD - Test Driven Development : Developing code based on the test cases given.
In Pure TDD : Start implementation for one test case at a time not all at once.
	R phase- Red Syntax error
	G phase- Green Test case wil pass but with  some redundancy
	R/B phase- Reimplementation
	
	
	
NOTE:
clang-fomat for code style in VS code

